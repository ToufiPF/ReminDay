plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "ch.epfl.reminday"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 2
        versionName "1.0.1"

        multiDexEnabled = true
        testInstrumentationRunner "ch.epfl.reminday.HiltTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled = true
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding false
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'

    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    def paging_version = "3.0.1"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // Hilt (dependency injection)
    implementation "com.google.dagger:hilt-android:$hilt_version"
    debugImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Faker (fake data generation)
    implementation 'io.github.serpro69:kotlin-faker:1.8.0-rc.0'

    // Testing
    testImplementation 'junit:junit:4.13.2'

    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"

    // Mockito
    testImplementation 'org.mockito.kotlin:mockito-kotlin:3.2.0'
    testImplementation 'org.mockito:mockito-inline:3.11.2'
    androidTestImplementation 'org.mockito:mockito-android:3.11.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    def espresso_version = "3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
}

// create new task for code coverage with Jacoco
task jacocoTestReport(type: JacocoReport, dependsOn: ['testReleaseUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // Exclude generated classes
    def excluded = [
            // Android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Binding.class',
            // Hilt
            '**/*Hilt*.*',
            '**/hilt_aggregated_deps/**',
            '**/*_Factory.class',
            '**/*_MembersInjector.class',
            '**/dagger/**',
            // Room
            '**/*_Impl*.*',
    ]

    def mainSrc = "$project.projectDir/src/main/java"
    sourceDirectories.from = files([mainSrc])

    // Separate unit test (in release build type) from instrumented tests (in debug type)
    // because android uses it's own instrumentations methods, incompatible with jacoco
    def releaseKotlinClasses = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/release", excludes: excluded + ["ch/epfl/reminday/ui**"])
    def debugKotlinClasses   = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug/ch/epfl/reminday/ui", excludes: excluded)
    def releaseJavaClasses = fileTree(dir: "$project.buildDir/intermediates/javac/release", excludes: excluded + ["ch/epfl/reminday/ui**"])
    def debugJavaClasses   = fileTree(dir: "$project.buildDir/intermediates/javac/debug/ch/epfl/reminday/ui", excludes: excluded)

    def kotlinClasses = releaseKotlinClasses + debugKotlinClasses
    def javaClasses = releaseJavaClasses + debugJavaClasses

    classDirectories.from = files([kotlinClasses, javaClasses])

    executionData.from = fileTree(dir: project.buildDir, includes: [
            // unit test coverage:
            'jacoco/testReleaseUnitTest.exec',
            // android coverage:
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec',
    ])
}

connectedCheck {
    finalizedBy jacocoTestReport
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}
